openapi: 3.0.3
info:
  title: whoIsBuilding.io - OpenAPI 3.0
  description: |-
    whoIsBuilding.io is an interactive web platform that enables computer science students to showcase, explore, and collaborate on projects. Students can upload their academic or personal projects, browse the work of others, and find potential collaborators based on shared interests in technologies or frameworks. Key features include project posting, browsing, and engaging via likes, comments, and collaboration requests, as well as GitHub-style commit heatmaps on profile pages.

    
    Some useful links:
    - [whoIsBuilding.io repository](https://github.com/jaxonhill/whoisbuilding-fall24-compe561)
  
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://whoisbuilding.io/api
tags:
  - name: user
    description: user data
  - name: project
    description: project data
paths:
  /projects:
    get:
      tags:
        - project
      summary: Get all projects
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      tags:
        - project
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: The created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /projects/{id}:
    get:
      tags:
        - project
      summary: Update project information
      parameters:
        - name: id
          in: path
          description: id of project to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: project with specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Project not found"
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "The project with the provided id does not exist."
    put:
      tags:
        - project
      summary: Update project information
      parameters:
        - name: id
          in: path
          description: id of project to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: The updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Project not found"
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "The project with the provided id does not exist."
    delete:
      tags:
        - project
      summary: Delete a project by id
      parameters:
        - name: id
          in: path
          description: id of project to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Successful deletion, returns the deleted project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Project not found"
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "The project with the provided id does not exist."
  
  /projects/search/{query}:
    get:
      tags:
        - project
      summary: Search for a project
      parameters:
        - name: query
          in: path
          description: query returning search results
          required: true
          schema:
            type: string
      responses:
        '201':
          description: List of relevant projects from the query string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'


  /users:
    get:
      tags:
        - user
      summary: Get all users
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get: 
      tags:
        - user
      summary: Get a user by id
      parameters:
        - name: id
          in: path
          description: id of user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: User with specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "The user with the provided id does not exist."
    put:
      tags:
        - user
      summary: Update user information
      parameters:
        - name: id
          in: path
          description: id of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "The user with the provided id does not exist."
    delete:
      tags:
        - user
      summary: Delete a user by id
      parameters:
        - name: id
          in: path
          description: id of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Successful deletion, returns the deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "The user with the provided id does not exist."
  /users/search/{query}:
    get:
      tags:
        - user
      summary: Search for a user
      parameters:
        - name: query
          in: path
          description: query returning search results
          required: true
          schema:
            type: string
      responses:
        '201':
          description: List of relevant users from the query string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'


components:
  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: UUID for the project
        title:
          type: string
          description: Title of the project
          example: "FastClass.io"
        description:
          type: string
          description: Project description
          example: "Streamlined search tool for my.sdsu"
        tags:
          type: array
          description: Languages, frameworks, or technologies associated with the project
          items:
            type: string
          example: ["JavaScript", "Next.js", "shadcn"]
        user_id:
          type: integer
          format: int64
          description: id of the user who owns the project
        created_at:
          type: string
          format: date-time
          description: date time when the user created the project
          example: "2023-09-23T14:21:00Z"

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: UUID for the user
        name:
          type: string
          description: Full name of the user
          example: "Jaxon Hill"
        gitHubUsername:
          type: string
          description: GitHub username
          example: "jaxonhill"
        email:
          type: string
          description: Email address of the user
          format: email
          example: "me@fastclass.io"
        password:
          type: string
          description: User's password (hashed)
          example: "do-not-hack-me!123"
        socials:
          type: array
          description: URLs to social sites
          items:
            type: string
          example: ["https://www.discord.com/username", "https://www.linkedin/in/username", "https://www.github.com/username"]
        expertise:
          type: array
          description: Areas of expertise (e.g., JavaScript, React)
          items: 
            type: string
          example: ["TypeScript", "Next.js", "shadcn"]
        created_at:
          type: string
          format: date-time
          description: User creation date
          example: "2023-09-23T14:21:00Z"